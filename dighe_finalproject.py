# -*- coding: utf-8 -*-
"""DIGHE_FINALPROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LGVwr893Ip8doun06uJOxcTNtgNafpdH

# BANKING DATASET
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt 
plt.rcParams["figure.figsize"]= (12, 7)
import pandas as pd
import numpy as np
import seaborn as sns
import io
import plotly.graph_objects as go
from pandas.plotting import scatter_matrix

from google.colab import files
uploaded = files.upload()

BANKINGDATASET = pd.read_csv(io.BytesIO(uploaded['Banking dataset.csv']))
BANKINGDATASET

BANKINGDATASET.info()

#checking missing values
BANKINGDATASET.apply(lambda x: sum(x.isnull()),axis=0)

print(BANKINGDATASET.head())

plt.figure(figsize=(10,6))
sns.countplot(x ='education',
              data=BANKINGDATASET,
              order=BANKINGDATASET['education'].value_counts().index,palette='dark:salmon_r')
plt.xlabel('Education')
plt.ylabel('Count')

BANKINGDATASET = BANKINGDATASET.rename(columns={'y':'Subscribed?'})

BANKINGDATASET.dtypes

education_target = BANKINGDATASET.groupby('education', as_index=False)['Subscribed?']
plt.figure(figsize=(10,6))
sns.histplot(data=BANKINGDATASET, x="education", hue="Subscribed?", multiple="dodge",binwidth=1.1,shrink=.8,palette='Blues')
plt.xlabel('Education')
plt.title('Distribution of subscribed value by education')

binary_columns = []
for column in BANKINGDATASET.select_dtypes('object').columns:
    if len(BANKINGDATASET[column].unique()) == 2:
        binary_columns.append(column)
    print(f"Column - {column} ",BANKINGDATASET[column].unique(), end='\n\n')

for column in binary_columns:
    BANKINGDATASET[column] = BANKINGDATASET[column].map({'yes': 1, 'no': 0})
    BANKINGDATASET.loc[:, binary_columns]

education_target = BANKINGDATASET.groupby('education', as_index=False)['Subscribed?']
education_target_mean = education_target.mean().sort_values(by='Subscribed?', ascending=False)
education_target_sum = education_target.sum().sort_values(by='Subscribed?', ascending=False)

education_target = BANKINGDATASET.groupby('education', as_index=False)['Subscribed?']
education_target_mean = education_target.mean().sort_values(by='Subscribed?', ascending=False)
education_target_sum = education_target.sum().sort_values(by='Subscribed?', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(data=education_target_sum, x='education', y='Subscribed?',palette='YlGn')
plt.xlabel("Education")
plt.ylabel("Sum subscribed?")
plt.title("Sum subscribed? value by education")

plt.figure(figsize=(10,6))
sns.histplot(data=BANKINGDATASET, x="education", hue="loan", multiple="dodge",binwidth=1.1,shrink=.8,palette='PRGn')
plt.title('Distribution of loan by education')
plt.xlabel('Education')

plt.figure(figsize=(10,6))
sns.histplot(data=BANKINGDATASET, x="education", hue="default", multiple="dodge",binwidth=1.1,shrink=.8,palette='PuBu')
plt.title('Distribution of default by education')
plt.xlabel('Education')

education_group = BANKINGDATASET.groupby('education', as_index=False)
education_loan_mean = education_group['loan'].mean().sort_values(by='loan', ascending=False)
education_loan_sum = education_group['loan'].sum().sort_values(by='loan', ascending=False)

education_default_mean = education_group['default'].mean().sort_values(by='default', ascending=False)
education_default_sum = education_group['default'].sum().sort_values(by='default', ascending=False)

education_loan_mean

education_target = BANKINGDATASET.groupby('education', as_index=False)['Subscribed?']
education_target_mean = education_target.mean().sort_values(by='Subscribed?', ascending=False)
education_target_sum = education_target.sum().sort_values(by='Subscribed?', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(data=education_target_mean, x='education', y='Subscribed?',palette='YlOrBr')
plt.xlabel("education")
plt.ylabel("Mean subscribed")
plt.title("Mean subscribed value by education")

plt.figure(figsize=(10,6))
sns.barplot(data=education_loan_mean, x='education', y='loan',palette='RdGy')
plt.xlabel("education")
plt.ylabel("Mean loan")
plt.title("Mean loan by education")

plt.figure(figsize=(10,6))
sns.barplot(data=education_loan_sum, x='education', y='loan',palette='GnBu')
plt.xlabel("Education")
plt.ylabel("Sum loan")
plt.title("Sum loan by education")

plt.figure(figsize=(12,6))
sns.countplot(x = 'job',
              data = BANKINGDATASET,
              order = BANKINGDATASET['job'].value_counts().index, palette=sns.color_palette('Paired'))
plt.xticks(fontsize='8')

Ejex,Ejey = 'job', 'Subscribed?'

BANKINGDATASET1 = BANKINGDATASET.groupby(Ejex)[Ejey].value_counts(normalize=True)
BANKINGDATASET1 = BANKINGDATASET1.mul(100)
BANKINGDATASET1 = BANKINGDATASET1.rename('percent').reset_index()

g = sns.catplot(x=Ejex,y='percent',hue=Ejey,kind='bar',data=BANKINGDATASET1,palette='GnBu')
g.figure.set_figheight(6)
g.figure.set_figwidth(10)
g.ax.set_ylim(0,100)
g.ax.set_xlabel('Job')
g.ax.set_ylabel('% of target variable')
g.ax.set_title("% of target variable by job")
plt.xticks(fontsize='6.5')
for p in g.ax.patches:
    txt = str(p.get_height().round(2)) + '%'
    txt_x = p.get_x() 
    txt_y = p.get_height()
    g.ax.text(txt_x,txt_y,txt)

def impute_outliers(df, column , minimum, maximum):
    col_values = BANKINGDATASET[column].values
    df[column] = np.where(np.logical_or(col_values<minimum, col_values>maximum), col_values.mean(), col_values)
    return df

#lets see statistic of Numerical variables before Outlier treatment
BANKINGDATASET.describe()

# scatter plot matrix
scatter_matrix(BANKINGDATASET)
plt.show()

# age
x=sns.boxplot(x='Subscribed?', y='age', data=BANKINGDATASET,palette='BuGn')
x.set_xlabel("is_success")

#campaign
x=sns.boxplot(x='Subscribed?', y='campaign', data=BANKINGDATASET, palette='BuGn')
x.set_xlabel("is_success")

#pdays
x=sns.boxplot(x='Subscribed?', y='pdays', data=BANKINGDATASET,palette='BuGn')
x.set_xlabel("is_success")

#previous
x=sns.boxplot(x='Subscribed?', y='previous', data=BANKINGDATASET)
x.set_xlabel("is_success")

# marital
temp2 = pd.crosstab(BANKINGDATASET['marital'], BANKINGDATASET['Subscribed?'])
temp2.plot(kind='bar')
print(BANKINGDATASET.groupby(['marital']).size()/len(BANKINGDATASET)*100) 
plt.legend(title='is_success')